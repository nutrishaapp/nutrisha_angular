{"version":3,"file":"src_app_pages_polls_poll_module_ts.js","mappings":"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","sources":["./src/app/core/polls/poll.service.ts","./src/app/core/store/polls/polls.actions.ts","./src/app/core/store/polls/polls.state.ts","./src/app/pages/polls/base/polls.component.ts","./src/app/pages/polls/base/polls.component.html","./src/app/pages/polls/create-poll/create-poll.component.ts","./src/app/pages/polls/create-poll/create-poll.component.html","./src/app/pages/polls/poll.module.ts","./src/app/pages/polls/polls-list/polls-list.component.ts","./src/app/pages/polls/polls-list/polls-list.component.html","./src/app/pages/polls/polls-routing.module.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {HttpClient, HttpParams} from \"@angular/common/http\";\r\nimport {CreatePollModel} from \"./models/create-poll.model\";\r\nimport {Observable, tap} from \"rxjs\";\r\nimport {BaseV1ResponseModel} from \"../shared/models/base-v1-response.model\";\r\nimport {environment} from \"../../../environments/environment\";\r\nimport {PagedListQueryModel} from \"../shared/models/paged-list-query.model\";\r\nimport {PollListItemModel} from \"./models/poll-list-item.model\";\r\nimport {HttpUtilsService} from \"../shared/services/http-utils.service\";\r\n\r\n\r\nconst pollAPI = environment.baseAdminV1Url + 'Poll'\r\n\r\n@Injectable()\r\nexport class PollService {\r\n  constructor(private httpClient: HttpClient) {\r\n  }\r\n\r\n\r\n  getPagedList(params: PagedListQueryModel): Observable<BaseV1ResponseModel<PollListItemModel[]>> {\r\n    return this.httpClient.get<BaseV1ResponseModel<PollListItemModel[]>>(\r\n      pollAPI + '/GetPagedList',\r\n      {\r\n        params: HttpUtilsService.prepareGetPagedListQueryParams(params)\r\n      }\r\n    ).pipe(tap(result => {\r\n      result.data.forEach(poll => {\r\n        poll.answersCount = poll.answers\r\n          .reduce((a, b) => a + b.selectedCount, 0);\r\n\r\n      })\r\n\r\n    }));\r\n  }\r\n\r\n\r\n  addPoll(pollModel: CreatePollModel): Observable<BaseV1ResponseModel<string>> {\r\n    return this.httpClient.post<BaseV1ResponseModel<string>>(\r\n      pollAPI + '/Post',\r\n      pollModel\r\n    );\r\n  }\r\n\r\n  deletePoll(id: string): Observable<BaseV1ResponseModel<any>> {\r\n    return this.httpClient.delete<BaseV1ResponseModel<string>>(\r\n      pollAPI + '/Delete',\r\n      {\r\n        params: new HttpParams().set('id', id)\r\n      }\r\n    );\r\n  }\r\n}\r\n","import {PagedListQueryModel} from \"../../shared/models/paged-list-query.model\";\r\nimport {PollStoreModel} from \"./polls.models\";\r\nimport {CreatePollModel} from \"../../polls/models/create-poll.model\";\r\n\r\nexport namespace PollsActions {\r\n    // Create \r\n    export class CreatePoll {\r\n        static readonly type = '[Polls] Polls Page Requested';\r\n        constructor(public payload: CreatePollModel) {\r\n        }\r\n    }\r\n\r\n    // export class PollCreated {\r\n    //     static readonly type = '[Polls] Polls Page Requested';\r\n    //     constructor(public payload: CreatePollModel) {\r\n    //     }\r\n    // }\r\n\r\n    \r\n\r\n    // Get\r\n    export class PollsPageRequested {\r\n        static readonly type = '[Polls] Polls Page Requested';\r\n        constructor(public payload: PagedListQueryModel) {\r\n        }\r\n    }\r\n\r\n    export class PollsPageReceived {\r\n        static readonly type = '[Polls] Polls Page Received';\r\n        constructor(public payload: Partial<PollStoreModel>) {\r\n        }\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {Action, Select, State, StateContext} from \"@ngxs/store\";\r\nimport {PollsActions} from \"./polls.actions\";\r\nimport {PollService} from \"../../polls/poll.service\";\r\nimport {PollStoreModel} from \"./polls.models\";\r\nimport {switchMap} from \"rxjs\";\r\n\r\n\r\n@State<PollStoreModel>({\r\n    name: \"polls\",\r\n    defaults: null\r\n})\r\n@Injectable()\r\nexport class PollsState {\r\n\r\n    constructor(private pollService: PollService) {\r\n    }\r\n\r\n    @Action(PollsActions.PollsPageRequested)\r\n    getPolls(ctx: StateContext<any>, action: PollsActions.PollsPageRequested) {\r\n        return this.pollService.getPagedList(action.payload).pipe(\r\n            switchMap(result => {\r\n                return ctx.dispatch(new PollsActions.PollsPageReceived({\r\n                    polls: result.data,\r\n                    totalRows: result.totalRows,\r\n                    query: action.payload,\r\n                    ids: result.data.map(poll => poll.id)\r\n                }))\r\n            }));\r\n    }\r\n\r\n    @Action(PollsActions.PollsPageReceived)\r\n    loadPolls(ctx: StateContext<PollStoreModel>, action: PollsActions.PollsPageReceived) {\r\n        ctx.patchState(action.payload);\r\n    }\r\n\r\n    // Selectors\r\n    @Select()\r\n    static getPollsPage(state: any): any {\r\n        return state?.polls.polls;\r\n    }\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {NavHeaderTitleService} from \"../../../core/shared/services/nav-header-title.service\";\r\n\r\n@Component({\r\n    selector: 'app-polls',\r\n    templateUrl: './polls.component.html',\r\n    styleUrls: ['./polls.component.scss']\r\n})\r\nexport class PollsComponent implements OnInit {\r\n\r\n    constructor(private navHeaderTitleService: NavHeaderTitleService) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.navHeaderTitleService.setTitle('POLLS.NAV_TITLE');\r\n    }\r\n\r\n}\r\n","<router-outlet></router-outlet>","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormArray,\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { colorValidator, baseColor } from '../../../core/shared';\r\nimport { PollService } from '../../../core/polls/poll.service';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { Router } from '@angular/router';\r\n\r\nconst maxPollQuestionLength = 120;\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-create-poll',\r\n  templateUrl: './create-poll.component.html',\r\n  styleUrls: ['./create-poll.component.scss'],\r\n})\r\nexport class CreatePollComponent implements OnInit {\r\n  createPoll: FormGroup;\r\n  answers: FormArray;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private pollService: PollService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.answers = this.formBuilder.array(\r\n      [this.buildAnswerControl(), this.buildAnswerControl()],\r\n      [Validators.minLength(2), Validators.maxLength(5)]\r\n    );\r\n\r\n    this.createPoll = this.formBuilder.group({\r\n      question: this.formBuilder.control(null, [\r\n        Validators.required,\r\n        Validators.maxLength(maxPollQuestionLength),\r\n      ]),\r\n      answers: this.answers,\r\n      backgroundColor: this.formBuilder.control(baseColor, [\r\n        Validators.required,\r\n        colorValidator,\r\n      ]),\r\n    });\r\n  }\r\n\r\n  AddAnswer() {\r\n    this.answers.push(this.buildAnswerControl());\r\n  }\r\n\r\n  submit() {\r\n    this.pollService\r\n      .addPoll(this.createPoll.value)\r\n      .pipe(untilDestroyed(this))\r\n      .subscribe(async () => {\r\n        await this.router.navigateByUrl('polls');\r\n      });\r\n  }\r\n\r\n  buildAnswerControl() {\r\n    return this.formBuilder.control(undefined, [\r\n      Validators.required,\r\n      Validators.maxLength(60),\r\n    ]);\r\n  }\r\n\r\n  // deleteAnswer(answer: AbstractControl) {\r\n  //   this.answers.removeAt(this.answers.controls.indexOf(answer));\r\n  // }\r\n}\r\n","<div class=\"mat-elevation-z8\">\r\n  <app-details-header\r\n    headerTitle=\"{{ 'POLLS.ADD' | translate }}\"\r\n  ></app-details-header>\r\n  <div class=\"p-3 pt-0 d-flex justify-content-start\">\r\n    <form [formGroup]=\"createPoll\" class=\"d-grid grid w-50\">\r\n      <mat-form-field class=\"my-1\">\r\n        <mat-label>{{ \"POLLS.SUBJECT\" | translate }}</mat-label>\r\n        <input\r\n          [maxlength]=\"120\"\r\n          matInput\r\n          formControlName=\"question\"\r\n          type=\"text\"\r\n        />\r\n        <mat-error>\r\n          <span *ngIf=\"createPoll.get('question').hasError('required')\">{{\r\n            \"VALIDATION_ERRORS.REQUIRED\" | translate\r\n          }}</span>\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <div formArrayName=\"answers\">\r\n        <div *ngFor=\"let answer of answers.controls; let i = index\">\r\n          <mat-form-field class=\"my-1 w-100\">\r\n            <mat-label>{{ \"POLLS.ANSWER\" | translate }} {{ i + 1 }}</mat-label>\r\n            <input\r\n              [maxlength]=\"60\"\r\n              matInput\r\n              [formControlName]=\"i\"\r\n              type=\"text\"\r\n            />\r\n            <mat-error>\r\n              <span\r\n                *ngIf=\"\r\n                  createPoll\r\n                    .get('answers')\r\n                    .get(i.toString())\r\n                    .hasError('required')\r\n                \"\r\n                >{{ \"VALIDATION_ERRORS.REQUIRED\" | translate }}</span\r\n              >\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <button\r\n          type=\"click\"\r\n          class=\"add-answer w-100\"\r\n          mat-button\r\n          color=\"primary\"\r\n          *ngIf=\"answers.length < 5\"\r\n          (click)=\"$event.preventDefault(); AddAnswer()\"\r\n        >\r\n          <i class=\"fa fa-add\"></i> {{ \"POLLS.ADD_NEW_ANSWER\" | translate }}\r\n        </button>\r\n      </div>\r\n\r\n      <!--    <mat-form-field class=\"mt-3\">-->\r\n      <!--        <mat-label>{{'POLLS.COLOR' | translate}}</mat-label>-->\r\n      <!--        <input matInput class=\"form-color\" formControlName=\"backgroundColor\" type=\"color\">-->\r\n      <!--    </mat-form-field>-->\r\n\r\n      <button\r\n        class=\"my-3 add-poll\"\r\n        type=\"submit\"\r\n        mat-flat-button\r\n        color=\"primary\"\r\n        (click)=\"submit()\"\r\n        [disabled]=\"createPoll.invalid\"\r\n      >\r\n        {{ \"SHARED.ADD\" | translate }}\r\n      </button>\r\n    </form>\r\n  </div>\r\n</div>\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MaterialModule} from \"../shared/material\";\r\nimport {PollsComponent} from './base/polls.component';\r\nimport {PollRoutingModule} from \"./polls-routing.module\";\r\nimport {CreatePollComponent} from \"./create-poll/create-poll.component\";\r\nimport {TranslateModule} from \"@ngx-translate/core\";\r\nimport {ReactiveFormsModule} from \"@angular/forms\";\r\nimport {PollService} from \"../../core/polls/poll.service\";\r\nimport {PollsListComponent} from './polls-list/polls-list.component';\r\nimport {SharedModule} from \"../shared/shared.module\";\r\nimport {NgxsModule} from \"@ngxs/store\";\r\nimport {PollsState} from \"../../core/store/polls/polls.state\";\r\nimport {NgxPermissionsModule} from \"ngx-permissions\";\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PollsComponent,\r\n    CreatePollComponent,\r\n    PollsListComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MaterialModule,\r\n    PollRoutingModule,\r\n    TranslateModule.forChild(),\r\n    ReactiveFormsModule,\r\n    SharedModule,\r\n    NgxsModule.forFeature([PollsState]),\r\n    NgxPermissionsModule.forChild()\r\n  ],\r\n  providers: [PollService]\r\n})\r\nexport class PollModule {\r\n}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { PagedListQueryModel } from '../../../core/shared';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { PollsActions } from '../../../core/store/polls/polls.actions';\r\nimport {\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  Observable,\r\n  Subject,\r\n  tap,\r\n} from 'rxjs';\r\nimport { PollListItemModel } from '../../../core/polls/models/poll-list-item.model';\r\nimport { PollService } from '../../../core/polls/poll.service';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-polls-list',\r\n  templateUrl: './polls-list.component.html',\r\n  styleUrls: ['./polls-list.component.scss'],\r\n})\r\nexport class PollsListComponent implements OnInit {\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n\r\n  search$ = new Subject<string>();\r\n  searchWord: string;\r\n\r\n  // State\r\n  @Select((state) => state.polls?.polls) polls$: Observable<\r\n    PollListItemModel[]\r\n  >;\r\n  @Select((state) => state.polls?.totalRows) totalRows$: Observable<number>;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    public router: Router,\r\n    private pollService: PollService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadPolls();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.search$\r\n      .pipe(untilDestroyed(this), distinctUntilChanged(), debounceTime(150))\r\n      .subscribe((searchTerm) => {\r\n        this.searchWord = searchTerm;\r\n        this.paginator.pageIndex = 0;\r\n\r\n        this.loadPolls();\r\n      });\r\n  }\r\n\r\n  loadPolls() {\r\n    this.store.dispatch(\r\n      new PollsActions.PollsPageRequested(this.prepareQueryParams())\r\n    );\r\n  }\r\n\r\n  prepareQueryParams() {\r\n    return new PagedListQueryModel({\r\n      pageNumber: this.paginator.pageIndex,\r\n      pageSize: this.paginator.pageSize,\r\n      searchWord: this.searchWord,\r\n    });\r\n  }\r\n\r\n  deletePoll($event: MouseEvent, poll: PollListItemModel) {\r\n    $event.stopPropagation();\r\n\r\n    this.pollService\r\n      .deletePoll(poll.id)\r\n      .pipe(\r\n        tap(() => {\r\n          this.loadPolls();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n","<div>\r\n  <div class=\"mat-elevation-z8\">\r\n    <app-list-header\r\n      [permissions]=\"'canCreateBlogs'\"\r\n      [searchTerm]=\"search$\"\r\n      [withAddButton]=\"true\"\r\n      (addClicked)=\"this.router.navigateByUrl('polls/add')\"\r\n      headerTitle=\"{{ 'POLLS.NAV_TITLE' | translate }}\"\r\n    >\r\n    </app-list-header>\r\n\r\n    <div>\r\n      <div *ngIf=\"polls$ | async; let polls\">\r\n        <div class=\"d-flex justify-content-center flex-wrap\">\r\n          <div *ngFor=\"let poll of polls\" class=\"m-1 poll\">\r\n            <mat-icon\r\n              *ngxPermissionsOnly=\"'canDeleteBlogs'\"\r\n              class=\"poll-delete icon-delete\"\r\n              (click)=\"deletePoll($event, poll)\"\r\n              >delete</mat-icon\r\n            >\r\n            <div class=\"w-100 d-flex align-items-center justify-content-center\">\r\n              <div\r\n                class=\"poll-question-container d-flex align-items-center justify-content-center\"\r\n              >\r\n                <h2 class=\"poll-question\">{{ poll.subject }}</h2>\r\n              </div>\r\n            </div>\r\n            <div\r\n              class=\"poll-answers-container d-flex justify-content-center align-items-center flex-column\"\r\n            >\r\n              <div class=\"poll-answer\" *ngFor=\"let answer of poll.answers\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <span\r\n                    class=\"poll-answer-selection-perc\"\r\n                    [style.width]=\"\r\n                      poll.answersCount == 0\r\n                        ? '0%'\r\n                        : (answer.selectedCount / poll.answersCount | percent)\r\n                    \"\r\n                  >\r\n                  </span>\r\n                  <div\r\n                    class=\"poll-answer-content d-flex justify-content-between align-items-center\"\r\n                  >\r\n                    <span>{{ answer.content }}</span>\r\n                    <span>\r\n                      {{\r\n                        poll.answersCount == 0\r\n                          ? \"0%\"\r\n                          : (answer.selectedCount / poll.answersCount | percent)\r\n                      }}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <app-no-data-placeholder [data]=\"polls\"> </app-no-data-placeholder>\r\n      </div>\r\n    </div>\r\n\r\n    <mat-paginator\r\n      [pageSize]=\"10\"\r\n      (page)=\"loadPolls()\"\r\n      [length]=\"totalRows$ | async\"\r\n      [pageSizeOptions]=\"[1, 5, 10, 50]\"\r\n      showFirstLastButtons\r\n    >\r\n    </mat-paginator>\r\n  </div>\r\n</div>\r\n","import { Route, RouterModule } from '@angular/router';\r\nimport { CreatePollComponent } from './create-poll/create-poll.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { PollsComponent } from './base/polls.component';\r\nimport { PollsListComponent } from './polls-list/polls-list.component';\r\nimport { PermissionGuard } from '../../core/shared/guards/permission-guard.service';\r\n\r\nconst routes: Route[] = [\r\n  {\r\n    path: '',\r\n    component: PollsComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: PollsListComponent,\r\n        canActivate: [PermissionGuard],\r\n        data: { permission: 'canViewBlogs' },\r\n      },\r\n      {\r\n        path: 'add',\r\n        component: CreatePollComponent,\r\n        canActivate: [PermissionGuard],\r\n        data: { permission: 'canCreateBlogs' },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class PollRoutingModule {}\r\n"],"names":["Validators","colorValidator","baseColor","UntilDestroy","untilDestroyed","i0","i_r4","$event","ctx_r6","maxPollQuestionLength","CreatePollComponent","constructor","formBuilder","pollService","router","ngOnInit","answers","array","buildAnswerControl","minLength","maxLength","createPoll","group","question","control","required","backgroundColor","AddAnswer","push","submit","addPoll","value","pipe","subscribe","navigateByUrl","undefined","selectors","decls","vars","consts","template","ctx","PagedListQueryModel","Select","PollsActions","debounceTime","distinctUntilChanged","Subject","tap","MatPaginator","PollsListComponent","store","loadPolls","ngAfterViewInit","search$","searchTerm","searchWord","paginator","pageIndex","dispatch","PollsPageRequested","prepareQueryParams","pageNumber","pageSize","deletePoll","poll","stopPropagation","id","viewQuery","__decorate","state","polls","_a","totalRows"],"sourceRoot":"webpack:///"}