{"version":3,"file":"default-src_app_pages_blog-tag_blog-tag_module_ts.js","mappings":"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","sources":["./src/app/core/blogs/index.ts","./src/app/core/blogs/models/blog-tag.models.ts","./src/app/core/blogs/services/blog-tag.service.ts","./src/app/pages/blog-tag/blog-tag-create/blog-tag-create.component.ts","./src/app/pages/blog-tag/blog-tag-create/blog-tag-create.component.html","./src/app/pages/blog-tag/blog-tag.component.ts","./src/app/pages/blog-tag/blog-tag.component.html","./src/app/pages/blog-tag/blog-tag.module.ts"],"sourcesContent":["export * from './models/blog-tag.models';\r\nexport * from './services/blog-tag.service';","export interface PostBlogTagModel {\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport class BlogTagDetailsModel{\r\n    id: string;\r\n    color: string;\r\n    name: string;\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport {\r\n  BlogTagDetailsModel,\r\n  PostBlogTagModel,\r\n} from '../models/blog-tag.models';\r\nimport { map, Observable } from 'rxjs';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { BaseV1ResponseModel } from '../../shared/models/base-v1-response.model';\r\n\r\nconst url = environment.baseAdminV1Url + 'BlogTag/';\r\n\r\n@Injectable()\r\nexport class BlogTagService {\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  addTag(model: PostBlogTagModel): Observable<string> {\r\n    const headers = new HttpHeaders().append(\r\n      'Authorization',\r\n      `Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIyNCIsIklzQWRtaW4iOiJUcnVlIiwibmJmIjoxNjU0MjE0NDk4LCJleHAiOjE2NTQzMDA4OTgsImlhdCI6MTY1NDIxNDQ5OH0.HRJBvflRmKiPW_D8KlLlM3WbvfXgmMg38zbocLIlTtC-XQ7LnU3xBWyAc3GcPPClH3vvEjOfRUIpY3Gk-k3KTA`\r\n    );\r\n    return this.httpClient\r\n      .post<BaseV1ResponseModel<string>>(url + 'post', model, {\r\n        headers,\r\n      })\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  getAll(keyword: string): Observable<BlogTagDetailsModel[]> {\r\n    let params: HttpParams;\r\n    if (keyword) {\r\n      params = new HttpParams().set('keyword', keyword);\r\n    }\r\n    return this.httpClient\r\n      .get<BaseV1ResponseModel<BlogTagDetailsModel[]>>(url + 'getAll', {\r\n        params: params,\r\n      })\r\n      .pipe(map((response) => response.data));\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { colorValidator } from '../../../core/shared';\r\n\r\nconst defaultTagColor = '#000000';\r\n\r\n@Component({\r\n  selector: 'app-blog-tag-create',\r\n  templateUrl: './blog-tag-create.component.html',\r\n  styleUrls: ['./blog-tag-create.component.scss'],\r\n})\r\nexport class BlogTagCreateComponent implements OnInit {\r\n  blogForm: FormGroup;\r\n\r\n  constructor(private dialogRef: MatDialogRef<BlogTagCreateComponent>) {}\r\n\r\n  ngOnInit(): void {\r\n    this.blogForm = new FormGroup({\r\n      name: new FormControl(null, [\r\n        Validators.required,\r\n        Validators.maxLength(10),\r\n      ]),\r\n      color: new FormControl(defaultTagColor, [\r\n        Validators.required,\r\n        colorValidator,\r\n        ({ value }: AbstractControl) => {\r\n          if (value == '#ffffff') {\r\n            return [\r\n              {\r\n                invalidColor: '',\r\n              },\r\n            ];\r\n          }\r\n\r\n          return null;\r\n        },\r\n      ]),\r\n    });\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  submit() {\r\n    this.dialogRef.close({ ...this.blogForm.value });\r\n  }\r\n}\r\n","<form [formGroup]=\"blogForm\" style=\"display: flex; flex-direction: column\">\r\n  <mat-error></mat-error>\r\n\r\n  <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n    <mat-label>Tag Name</mat-label>\r\n    <input [maxlength]=\"10\" matInput placeholder=\"Tag Name\" formControlName=\"name\">\r\n  </mat-form-field>\r\n  <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n    <mat-label>Color</mat-label>\r\n    <input matInput type=\"color\" formControlName=\"color\" placeholder=\"Color\" #color>\r\n    <mat-error *ngIf=\"color.value == '#ffffff'\">\r\n      {{\"VALIDATION_ERRORS.INVALID_COLOR\" | translate}}\r\n    </mat-error>\r\n  </mat-form-field>\r\n\r\n  <button mat-button type=\"submit\" (click)=\"submit()\" color=\"primary\"\r\n          [disabled]=\"blogForm.invalid\">{{'SHARED.ADD' | translate}}</button>\r\n  <button mat-button type=\"button\" (click)=\"close()\">{{'SHARED.CANCEL' | translate}}</button>\r\n</form>\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnInit,\r\n  Self,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport {\r\n  ControlValueAccessor,\r\n  NgControl,\r\n  Validator,\r\n  AbstractControl,\r\n  ValidationErrors,\r\n  FormControl,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { map, of, switchMap, take, tap } from 'rxjs';\r\nimport { BlogTagCreateComponent } from './blog-tag-create/blog-tag-create.component';\r\nimport { BlogTagDetailsModel, BlogTagService } from '../../core/blogs';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { Tag } from '@angular/compiler/src/i18n/serializers/xml_helper';\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-blog-tag',\r\n  templateUrl: './blog-tag.component.html',\r\n  styleUrls: ['./blog-tag.component.scss'],\r\n})\r\nexport class BLogTagComponent\r\n  implements OnInit, ControlValueAccessor, Validator\r\n{\r\n  loading: boolean = false;\r\n  tags: BlogTagDetailsModel[];\r\n  selectedTag: BlogTagDetailsModel;\r\n\r\n  formControl = new FormControl();\r\n  @Input() readOnly: boolean = true;\r\n  @ViewChild('tag', { static: true }) input: ElementRef;\r\n\r\n  constructor(\r\n    @Self() public controlDir: NgControl,\r\n    private blogTagService: BlogTagService,\r\n    private dialog: MatDialog\r\n  ) {\r\n    this.controlDir.valueAccessor = this;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.formControl.setValidators(this.controlDir.control.validator);\r\n    this.formControl.setValidators(Validators.required);\r\n  }\r\n\r\n  addTag() {\r\n    const dialogRef = this.dialog.open(BlogTagCreateComponent);\r\n    dialogRef\r\n      .afterClosed()\r\n      .pipe(\r\n        untilDestroyed(this),\r\n        take(1),\r\n        switchMap((tag) => {\r\n          if (tag) {\r\n            return this.blogTagService.addTag(tag).pipe(\r\n              map((tagId) => ({ ...tag, id: tagId })),\r\n              tap((tag) => this.setSelectedTag(tag))\r\n            );\r\n          }\r\n\r\n          return of(null);\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  setSelectedTag(tag) {\r\n    this.controlDir.control?.setValue(tag);\r\n  }\r\n\r\n  clear() {\r\n    this.selectedTag = null;\r\n    this.formControl.markAsPristine();\r\n    this.formControl.markAsUntouched();\r\n    this.input.nativeElement.value = null;\r\n  }\r\n\r\n  loadOnFocusTags() {\r\n    this.controlDir.control.markAsTouched();\r\n    if (this.readOnly || this.selectedTag || (this.tags && this.tags.length)) {\r\n      return;\r\n    }\r\n\r\n    this.loadTags(null);\r\n  }\r\n  loadTags(keyword) {\r\n    this.loading = true;\r\n    this.controlDir.control.markAsTouched();\r\n    this.blogTagService\r\n      .getAll(keyword)\r\n      .pipe(untilDestroyed(this), take(1))\r\n      .subscribe((tags) => {\r\n        this.tags = tags;\r\n        this.loading = false;\r\n      });\r\n\r\n    this.setSelectedTag(null);\r\n  }\r\n\r\n  // Validation\r\n  validate(control: AbstractControl): ValidationErrors {\r\n    if (this.selectedTag) return null;\r\n    return [];\r\n  }\r\n\r\n  registerOnValidatorChange?(fn: () => void): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  // NG CONTROL\r\n  writeValue(obj: any): void {\r\n    this.selectedTag = obj;\r\n    if (obj) {\r\n      this.formControl.setValue(obj.name);\r\n      this.input.nativeElement.value = obj.name;\r\n    } else {\r\n      this.formControl?.setErrors([]);\r\n    }\r\n  }\r\n\r\n  onChanged(event) {}\r\n\r\n  onTouched() {}\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChanged = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n","<div class=\"d-flex align-items-start\">\r\n  <mat-form-field class=\"d-flex align-items-center\">\r\n    <mat-label>{{ \"BLOGS.SELECT_TAG\" | translate }}</mat-label>\r\n    <input\r\n      matInput\r\n      [readonly]=\"readOnly\"\r\n      #tag\r\n      type=\"text\"\r\n      placeholder=\"Pick one\"\r\n      aria-label=\"Number\"\r\n      title=\"Text\"\r\n      [formControl]=\"formControl\"\r\n      (input)=\"loadTags(tag.value)\"\r\n      (focus)=\"loadOnFocusTags()\"\r\n      [matAutocomplete]=\"auto\"\r\n    />\r\n\r\n    <mat-error>{{\r\n      \"VALIDATION_ERRORS.SELECT_CORRECT_TAG\" | translate\r\n    }}</mat-error>\r\n\r\n    <mat-spinner matSuffix *ngIf=\"loading\" diameter=\"20\"></mat-spinner>\r\n    <mat-autocomplete\r\n      autoActiveFirstOption\r\n      #auto=\"matAutocomplete\"\r\n      (optionSelected)=\"setSelectedTag($event.option.value)\"\r\n    >\r\n      <mat-option *ngFor=\"let tag of tags\" [value]=\"tag\">\r\n        {{ tag.name }}\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  </mat-form-field>\r\n  <button\r\n    *ngIf=\"!readOnly\"\r\n    mat-flat-button\r\n    color=\"primary\"\r\n    class=\"mx-2 add-tag\"\r\n    (click)=\"addTag()\"\r\n  >\r\n    {{ \"BLOGS.ADD_TAG\" | translate }}\r\n  </button>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BlogTagCreateComponent } from './blog-tag-create/blog-tag-create.component';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { BLogTagComponent } from './blog-tag.component';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { BlogTagService } from '../../core/blogs';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\n@NgModule({\r\n  declarations: [BlogTagCreateComponent, BLogTagComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatInputModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatAutocompleteModule,\r\n    MatSelectModule,\r\n    TranslateModule,\r\n    MatProgressSpinnerModule,\r\n  ],\r\n  exports: [BLogTagComponent],\r\n  providers: [BlogTagService],\r\n})\r\nexport class BlogTagModule {}\r\n"],"names":[],"sourceRoot":"webpack:///"}